name: Initialization and Deployment Workflow

on:
  push:
    branches:
      - main

jobs:
  initialization:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Initial Server Setup
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            if [ ! -f /home/${{ secrets.SSH_USERNAME }}/.setup_done ]; then
              echo "⭐️ Git 설정"
              git config --global user.name "kpryu6"
              git config --global user.email "kyongpyo0626@gmail.com"

              echo "⭐️ Miniconda 설치"
              wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
              bash Miniconda3-latest-Linux-x86_64.sh -b -p $HOME/miniconda
              echo "export PATH=\"$HOME/miniconda/bin:\$PATH\"" >> ~/.bashrc
              source ~/.bashrc
              source $HOME/miniconda/etc/profile.d/conda.sh
              conda create -n airflow-practice python=3.11 -y
              conda activate airflow-practice
              pip install poetry
              pip install pre-commit
              conda install pandas
              conda deactivate

              echo "⭐️ 시스템 업데이트 및 PostgreSQL 설치"
              sudo apt update && sudo apt -y upgrade
              sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
              wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
              sudo apt-get update -y
              sudo apt-get -y install postgresql-14 apt-transport-https ca-certificates curl gnupg-agent software-properties-common

              echo "⭐️ Docker 설치 및 Docker 권한 부여"
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update -y
              sudo apt-get -y install docker-ce docker-ce-cli containerd.io
              sudo usermod -aG docker ${{ secrets.SSH_USERNAME }}
              sudo chmod 666 /var/run/docker.sock
              sudo systemctl restart docker
              sudo service docker restart

              echo "⭐️ docker compose 설치"
              sudo apt -y install docker-compose

              echo "⭐️ SSH 키 생성 및 GitHub에 등록"
              if [ ! -f ~/.ssh/id_rsa ]; then
                ssh-keygen -t rsa -b 4096 -C "kyongpyo0626@gmail.com" -f ~/.ssh/id_rsa -N ""
              fi
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
              curl -H "Authorization: token ${{ secrets.TOKEN }}" \
                  -X POST \
                  -d "{\"title\":\"airflow\",\"key\":\"$PUBLIC_KEY\"}" \
                  https://api.github.com/user/keys

              echo "⭐️ Astronomer 설치 및 Airflow 시작"
              curl -sSL install.astronomer.io | sudo bash -s -- v1.25.0 
              git clone git@github.com:kpryu6/airflow-prac.git
              cd airflow-practice
              touch .env
              astro dev start 2>astro_error.log &
              sleep 60

              echo "⭐️ 에러 로그에서 포트 사용 중 에러가 있는지 확인"
              if grep -q "bind: address already in use" astro_error.log; then
                echo "‼️ 포트 5432가 이미 사용 중입니다. Astro 프로세스를 종료합니다."
                pkill astro
                sudo systemctl stop postgresql
              fi
              pkill astro
              astro dev stop && astro dev kill

              echo "⭐️ airflow plugins 폴더 권한 변경 완료"
              sudo chown ubuntu plugins
              sudo chgrp ubuntu plugins

              echo "⭐️ conda 환경 변수 적용 완료"
              conda init
              source ~/.bashrc

              echo "⭐️ Airflow 설치"
              pip install apache-airflow

              echo "⭐️ 코드 테스트"
              pip install pytest
              pytest

              echo "⭐️ 설정 완료"
              touch /home/${{ secrets.SSH_USERNAME }}/.setup_done
            else
              echo "⭐️ Already Initialized"
            fi

  deployment:
    runs-on: ubuntu-latest
    needs: initialization

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Deploy Application
        env:
          REPOSITORY_NAME: ${{ github.event.repository.name }}
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }} # 운영 환경의 GCP INSTANCE
          host: ${{ secrets.SSH_HOST }} # 마찬가지
          username: ${{ secrets.SSH_USERNAME }} # 마찬가지
          script: |
            cd
            CURRENT_DIR=$(pwd)
            cd $CURRENT_DIR/${{ vars.repository_name }}
            echo "현재 위치: $(pwd)"
            git pull origin main

            # docker-compose.yaml이나 DAG 파일 변경이 감지되면 Airflow 재시작
            if git diff --name-only HEAD~1 | grep -E 'compose.yaml|dags/'; then
              echo "⭐️ Airflow 재시작"
              astro dev stop
              astro dev start
            fi
            echo "⭐️ 배포 완료"            